import { safeImport_default } from "./safeImport-BXmqy9V4.js";

//#region exports.ts
const locales = [
	"de",
	"es",
	"fr",
	"it",
	"ko",
	"pl",
	"pt",
	"ru",
	"zh",
	"cs",
	"sr",
	"uk"
];
const makeBundle = async () => {
	/**
	* English United States translations bundle,
	*  default translations
	* @type {WorldstateLangBundle}
	*/
	const enUS = {
		arcanes: await safeImport_default("./data/arcanes.json"),
		archonShards: await safeImport_default("./data/archonShards.json"),
		conclave: await safeImport_default("./data/conclaveData.json"),
		events: await safeImport_default("./data/eventsData.json"),
		factions: await safeImport_default("./data/factionsData.json"),
		fissureModifiers: await safeImport_default("./data/fissureModifiers.json"),
		languages: await safeImport_default("./data/languages.json"),
		missionTypes: await safeImport_default("./data/missionTypes.json"),
		operationTypes: await safeImport_default("./data/operationTypes.json"),
		persistentEnemy: await safeImport_default("./data/persistentEnemyData.json"),
		solNodes: await safeImport_default("./data/solNodes.json"),
		sortie: await safeImport_default("./data/sortieData.json"),
		syndicates: await safeImport_default("./data/syndicatesData.json"),
		tutorials: await safeImport_default("./data/tutorials.json"),
		upgradeTypes: await safeImport_default("./data/upgradeTypes.json"),
		synthTargets: await safeImport_default("./data/synthTargets.json"),
		steelPath: await safeImport_default("./data/steelPath.json")
	};
	const bundle = {
		en: enUS,
		...enUS,
		locales
	};
	for await (const locale of locales)
 /**
	* Translations bundle for $locale
	* @type {WorldstateLangBundle}
	*/
	bundle[locale] = {
		arcanes: await safeImport_default(`./data/${locale}/arcanes.json`, enUS.arcanes),
		archonShards: await safeImport_default(`./data/${locale}/archonShards.json`, enUS.archonShards),
		conclave: await safeImport_default(`./data/${locale}/conclaveData.json`, enUS.conclave),
		events: await safeImport_default(`./data/${locale}/eventsData.json`, enUS.events),
		factions: await safeImport_default(`./data/${locale}/factionsData.json`, enUS.factions),
		fissureModifiers: await safeImport_default(`./data/${locale}/fissureModifiers.json`, enUS.fissureModifiers),
		languages: await safeImport_default(`./data/${locale}/languages.json`, enUS.languages),
		missionTypes: await safeImport_default(`./data/${locale}/missionTypes.json`, enUS.missionTypes),
		operationTypes: await safeImport_default(`./data/${locale}/operationTypes.json`, enUS.operationTypes),
		persistentEnemy: await safeImport_default(`./data/${locale}/persistentEnemyData.json`, enUS.persistentEnemy),
		solNodes: await safeImport_default(`./data/${locale}/solNodes.json`, enUS.solNodes),
		sortie: await safeImport_default(`./data/${locale}/sortieData.json`, enUS.sortie),
		syndicates: await safeImport_default(`./data/${locale}/syndicatesData.json`, enUS.syndicates),
		tutorials: await safeImport_default(`./data/${locale}/tutorials.json`, enUS.tutorials),
		upgradeTypes: await safeImport_default(`./data/${locale}/upgradeTypes.json`, enUS.upgradeTypes),
		synthTargets: await safeImport_default(`./data/${locale}/synthTargets.json`, enUS.synthTargets),
		steelPath: await safeImport_default(`./data/${locale}/steelPath.json`, enUS.steelPath)
	};
	locales.push("en");
	return bundle;
};
var exports_default = await makeBundle();

//#endregion
export { exports_default };