import { Arcane, ArchonShard, Conclave, Events, SolNode, SortieData, SteelPath, SynthesisTarget } from "./types-CU1MHyQQ.js";

//#region exports.d.ts
type Locale = 'de' | 'en' | 'es' | 'fr' | 'it' | 'ko' | 'pl' | 'pt' | 'ru' | 'zh' | 'cs' | 'sr' | 'uk';
/**
 * Bundles all the data for a particular language
 */
interface WorldstateLangBundle {
  /**
   * Deprecated: Array of arcane data
   */
  arcanes: Arcane[];
  /**
   * Data for Archon shard colors
   */
  archonShards: Record<string, ArchonShard>;
  /**
   * Data for translating PvP categories and types
   */
  conclave: Conclave;
  /**
   * Deprecated: Data for converting event tags to useable event data.
   * Deprecated in favor of keeping values in languages.json
   */
  events: Events;
  /**
   * Faction universal name to plain-usage name
   */
  factions: Record<string, {
    value: string;
  }>;
  /**
   * Map of fissures to "Warframeified" tier names and numbers
   */
  fissureModifiers: Record<string, {
    value: string;
    num: number;
  }>;
  /**
   * Map of "internal" Warframe strings to useable language strings
   */
  languages: Record<string, {
    value: string;
    desc: string;
  }>;
  /**
   * Map of Mission Type identifiers to their corresponding values
   */
  missionTypes: Record<string, {
    value: string;
  }>;
  /**
   * Global modifiers for applying operations to things like
   * credits, affinity, etc.
   */
  operationTypes: Record<string, {
    value: string;
    symbol: string;
  }>;
  /**
   * Region mapping for indicies to planets
   */
  persistentEnemy: {
    regions: string[];
  };
  /**
   * Nodes in the Sol system, with enemy type and node information
   */
  solNodes: Record<string, SolNode>;
  /**
   * Sortie-specific mapping for modifier type, description, and boss
   */
  sortie: SortieData;
  /**
   * Steel Path mission type translations
   */
  steelPath: SteelPath;
  /**
   * Syndicate data
   */
  syndicates: Record<string, {
    name: string;
  }>;
  /**
   * Synthesis target data for optimal locations to find targets.
   */
  synthTargets: SynthesisTarget[];
  /**
   * Official tutorials.
   * Not many have been released in a long time.
   */
  tutorials: {
    regex: string;
    name: string;
    url: string;
  }[];
  /**
   * Global upgrade types that are modified by #operationTypes
   */
  upgradeTypes: Record<string, {
    value: string;
  }>;
}
declare const _default: WorldstateLangBundle & {
  de?: WorldstateLangBundle | undefined;
  en?: WorldstateLangBundle | undefined;
  es?: WorldstateLangBundle | undefined;
  fr?: WorldstateLangBundle | undefined;
  it?: WorldstateLangBundle | undefined;
  ko?: WorldstateLangBundle | undefined;
  pl?: WorldstateLangBundle | undefined;
  pt?: WorldstateLangBundle | undefined;
  ru?: WorldstateLangBundle | undefined;
  zh?: WorldstateLangBundle | undefined;
  cs?: WorldstateLangBundle | undefined;
  sr?: WorldstateLangBundle | undefined;
  uk?: WorldstateLangBundle | undefined;
} & {
  locales: Locale[];
};
//#endregion
export { Locale, WorldstateLangBundle, _default };