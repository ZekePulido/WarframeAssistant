//#region tools/timeDate.d.ts
/**
 * @param   {number} millis The number of milliseconds in the time delta
 * @returns {string} formatted time delta
 */
declare const timeDeltaToString: (millis: number) => string;
/**
 * Returns the number of milliseconds between now and a given date
 * @param   {Date} d         The date from which the current time will be subtracted
 * @param   {function} [now] A function that returns the current UNIX time in milliseconds
 * @returns {number}       The number of milliseconds after the given date to now
 */
declare const fromNow: (d: Date, now?: () => number) => number;
/**
 * Returns the number of milliseconds between a given date and now
 * @param   {Date} d         The date that the current time will be subtracted from
 * @param   {function} [now] A function that returns the current UNIX time in milliseconds
 * @returns {number}        The number of milliseconds after now to the given date
 */
declare const toNow: (d: Date, now?: () => number) => number;
interface ContentTimestamp {
  $date?: {
    $numberLong: number;
  };
}
/**
 * Returns a new Date constructed from a worldState date object
 * @param {Object} d The worldState date object
 * @returns {Date} parsed date from DE date format
 */
declare const parseDate: (d?: ContentTimestamp) => Date;
/**
 * Get a weekly reset timestamp
 */
declare const weeklyReset: () => {
  activation: Date;
  expiry: Date;
};
/**
 * Get a daily reset timestamp
 */
declare const dailyReset: () => {
  activation: Date;
  expiry: Date;
};
/**
 * An object containing functions to format dates and times
 * @typedef {Record<string, Function>}           TimeDateFunctions
 * @property {Function} timeDeltaToString - Converts a time difference to a string
 * @property {Function} fromNow           - Returns the number of milliseconds between now and
 *                                          a given date
 * @property {Function} toNow             - Returns the number of milliseconds between a given
 *                                          date and now
 */
declare const _default: {
  timeDeltaToString: (millis: number) => string;
  fromNow: (d: Date, now?: () => number) => number;
  toNow: (d: Date, now?: () => number) => number;
  parseDate: (d?: ContentTimestamp) => Date;
  dailyReset: () => {
    activation: Date;
    expiry: Date;
  };
  weeklyReset: () => {
    activation: Date;
    expiry: Date;
  };
};
//#endregion
export { ContentTimestamp, _default, dailyReset, fromNow, parseDate, timeDeltaToString, toNow, weeklyReset };